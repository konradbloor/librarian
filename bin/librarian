#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'

$LOAD_PATH << File.dirname(__FILE__)+'/../lib'
require 'Type.rb'
require 'TypeRepository.rb'
require 'Classifier.rb'
require 'SpotlightImportingWordExtractor.rb'
require 'RegexField.rb'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: librarian COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  ""
  opt.separator  "     new: create a new type of document (remember to amend configuration file)"
  opt.separator  "     types: list document types in configuration file"
  opt.separator  "     train: train documents for a specific type of document"
  opt.separator  "     list: see what librarian would do with the given file or directory"
  opt.separator  "     words: see the words librarian looks at to classify/extract fields/rename"
  opt.separator  "     move: move all files that have all fields correctly filled in to destinations"
  opt.separator  "     copy: copy all files that have all fields correctly filled in to destinations"
  opt.separator  ""
  opt.separator  "Options"
  opt.separator  ""

  opt.on("-t","--type DOCUMENTTYPE","document type to create or train") do |documenttype|
    options[:documenttype] = documenttype
  end

  opt.on("-f","--file FILE","file to train or deliver") do |actfile|
    options[:actfile] = actfile
  end

  opt.on("-d","--daemon","runing on daemon mode? delete") do
    options[:daemon] = true
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end

  opt.separator  ""
  opt.separator  "Examples"
  opt.separator  ""
  opt.separator  "     librarian new -t bankstatements"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/samplebankstatement.pdf"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/statements"
  opt.separator  "     librarian list -f /users/me/Documents/Scans"
  opt.separator  "     librarian move -f /users/me/Documents/Scans"
  opt.separator  "     librarian copy -f /users/me/Documents/Scans"
  opt.separator  "     librarian words -f /users/me/Documents/Scans/321232423.pdf"

end

opt_parser.parse!

def newtype(documentType)
  type = TypeRepository.new.get(documentType)
  if type.nil?
    puts "Add new document type #{documentType}"
    type = Type.new(documentType)
    type.setDestination(".")
    type.addField("examplefield",RegexField.new("\\s(\\d{8})\\s"))
    typeRepository = TypeRepository.new
    typeRepository.add(type)
    puts "Don't forget to modify the regular expressions in the data file"
  else
    puts "You already have a type called #{documentType}"
  end
  listtypes()
end

def listtypes()
  typeRepository = TypeRepository.new 
  format = "\t%#{typeRepository.maximumNameLength}s  %-#{typeRepository.maximumDestinationLength}s"

  puts ""
  puts format % [ "Type", "Destination"]
  puts format % [ "-"*typeRepository.maximumNameLength, "-"*typeRepository.maximumDestinationLength]
  typeRepository.types.each do | type |
    puts format % [ type.name, type.destination]
  end
  puts ""
end

def train(documentType, filename)
  type = TypeRepository.new.get(documentType)
  if type.nil? 
    puts "I don't know what type #{documentType} is."
  else
    typeClassifier = Classifier.new("type");
    typeClassifier.train(documentType, filename);
  end 
end

def process(filename, action)

  typeRepository = TypeRepository.new
  format = "\t%#{typeRepository.maximumNameLength}s  %1s  %s --> %s"

  if(File.directory?(filename)) 
    files = Dir.glob("*.pdf")
    files.each { |f| process(f, action) }
  end

  if File.fnmatch("*.pdf",filename)

    typeClassifier = Classifier.new("type");
    category = typeClassifier.classify(filename);

    type = typeRepository.get(category)
  
    extractedwords = SpotlightImportingWordExtractor.new(filename).extractedWords
    fields = type.getFields(category, filename, extractedwords)
    newfilename = type.getNewFilename(fields)
    complete = type.hasExtractedAllFields(fields)

    puts format % [ fields["category"], complete ? "" : "X", filename, newfilename]

    if(complete)
      FileUtils.mkdir_p(type.destination);
      if action == :move 
        FileUtils.move(filename, type.destination+"/"+newfilename)
      end
      if action == :copy
        FileUtils.cp(filename, type.destination+"/"+newfilename)
      end      
    end
  
  end
end

def words(filename)
  extractedwords = SpotlightImportingWordExtractor.new(filename).extractedWords
  puts "#{extractedwords}"
end

case ARGV[0]
  when "new"
    newtype(options[:documenttype])
  when "types"
    listtypes()
  when "train"
    train(options[:documenttype],options[:actfile])
  when "move"
    process(options[:actfile], :move)
  when "copy"
    process(options[:actfile], :copy)
  when "list"
    process(options[:actfile], :list)
  when "words"
    words(options[:actfile])
  else
    puts opt_parser
end



