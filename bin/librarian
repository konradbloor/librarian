#!/usr/bin/env ruby
require 'optparse'

$LOAD_PATH << File.dirname(__FILE__)+'/../lib'
require 'Type.rb'
require 'TypeRepository.rb'
require 'Classifier.rb'
require 'SpotlightImportingWordExtractor.rb'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: librarian COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     new: create a new type of document (remember to amend configuration file)"
  opt.separator  "     train: train documents for a specific type of document"
  opt.separator  "     deliver: deliver a document to the librarian"
  opt.separator  "     peek: see the words librarian looks at to classify/extract fields/rename"
  opt.separator  ""
  opt.separator  "Options"
  opt.separator  ""

  opt.on("-t","--type DOCUMENTTYPE","document type to create or train") do |documenttype|
    options[:documenttype] = documenttype
  end

  opt.on("-f","--file FILE","file to train or deliver") do |actfile|
    options[:actfile] = actfile
  end

  opt.on("-d","--daemon","runing on daemon mode? delete") do
    options[:daemon] = true
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end

  opt.on("-e","--environment ENVIRONMENT delete",Numeric,
         "which environment you want server run") do |environment|
    options[:environment] = environment
  end

  opt.on("--delay N", Float, "Delay N seconds before executing delete") do |n|
    options[:delay] = n
  end

  opt.separator  ""
  opt.separator  "Examples"
  opt.separator  "     librarian new -t bankstatements"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/samplebankstatement.pdf"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/statements"
  opt.separator  "     librarian deliver -f /users/me/Documents/Scans"
  opt.separator  "     librarian deliver -f /users/me/Documents/Scans/321232423.pdf"
  opt.separator  "     librarian words -f /users/me/Documents/Scans/321232423.pdf"

end

opt_parser.parse!

def newtype(documentType)
  puts "Add new document type #{documentType}"
  type = Type.new(documentType)
  type.setDestination(".")
  type.addField("examplefield","\\s(\\d{8})\\s")
  typeRepository = TypeRepository.new
  typeRepository.add(type)
  puts "Don't forget to modify the regular expressions in the data file"
end

def train(documentType, filename)
  typeRepository = TypeRepository.new
  type = typeRepository.get(documentType)
  if type.nil? 
    puts "I don't know what type #{documentType} is."
  else
    typeClassifier = Classifier.new("type");
    typeClassifier.train(documentType, filename);
  end 
end

def deliver(filename)

  if(File.directory?(filename)) 
    files = Dir.glob("*.pdf")
    files.each { |f| deliver(f) }
  end

  if File.fnmatch("*.pdf",filename)

    typeClassifier = Classifier.new("type");
    category = typeClassifier.classify(filename);

    typeRepository = TypeRepository.new
    type = typeRepository.get(category)
  
    extractedwords = SpotlightImportingWordExtractor.new(filename).extractedWords
    fields = type.getFields(category, filename, extractedwords)
    puts "#{filename} : #{fields}"

  end
end

def words(filename)
  extractedwords = SpotlightImportingWordExtractor.new(filename).extractedWords
  puts "#{extractedwords}"
end

case ARGV[0]
  when "new"
    newtype(options[:documenttype])
  when "train"
    train(options[:documenttype],options[:actfile])
  when "deliver"
    deliver(options[:actfile])
  when "words"
    words(options[:actfile])
  else
    puts opt_parser
end



