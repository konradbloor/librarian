#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'

$LOAD_PATH << File.dirname(__FILE__)+'/../lib'
require 'Librarian.rb'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: librarian COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  ""
  opt.separator  "     new: create a new type of document (remember to amend configuration file)"
  opt.separator  "     types: list document types in configuration file"
  opt.separator  "     train: train documents for a specific type of document"
  opt.separator  "     list: see what librarian would do with the given file or directory"
  opt.separator  "     words: see the words librarian looks at to classify/extract fields/rename"
  opt.separator  "     move: move all files that have all fields correctly filled in to destinations"
  opt.separator  "     copy: copy all files that have all fields correctly filled in to destinations"
  opt.separator  ""
  opt.separator  "Options"
  opt.separator  ""

  opt.on("-t","--type DOCUMENTTYPE","document type to create or train") do |documenttype|
    options[:documenttype] = documenttype
  end

  opt.on("-f","--file FILE","file to train or deliver") do |actfile|
    options[:actfile] = actfile
  end

  opt.on("-d","--daemon","runing on daemon mode? delete") do
    options[:daemon] = true
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end

  opt.separator  ""
  opt.separator  "Examples"
  opt.separator  ""
  opt.separator  "     librarian new -t bankstatements"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/samplebankstatement.pdf"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/statements"
  opt.separator  "     librarian list -f /users/me/Documents/Scans"
  opt.separator  "     librarian move -f /users/me/Documents/Scans"
  opt.separator  "     librarian copy -f /users/me/Documents/Scans"
  opt.separator  "     librarian words -f /users/me/Documents/Scans/321232423.pdf"

end

opt_parser.parse!


case ARGV[0]
  when "new"
    Librarian.new.newtype(options[:documenttype])
  when "types"
    Librarian.new.listtypes()
  when "train"
    Librarian.new.train(options[:documenttype],options[:actfile])
  when "move"
    Librarian.new.process(options[:actfile], :move)
  when "copy"
    Librarian.new.process(options[:actfile], :copy)
  when "list"
    Librarian.new.process(options[:actfile], :list)
  when "words"
    Librarian.new.words(options[:actfile])
  else
    puts opt_parser
end



