#!/usr/bin/env ruby
require 'optparse'
require 'rubygems'
require 'nbayes'
require File.dirname(__FILE__) + '/Type.rb'
require File.dirname(__FILE__) + '/TypeRepository.rb'
require File.dirname(__FILE__) + '/SpotlightImportingWordExtractor.rb'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: librarian COMMAND [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     new: create a new type of document (remember to amend configuration file)"
  opt.separator  "     train: train documents for a specific type of document"
  opt.separator  "     deliver: deliver a document to the librarian"
  opt.separator  ""
  opt.separator  "Options"
  opt.separator  ""

  opt.on("-t","--type DOCUMENTTYPE","document type to create or train") do |documenttype|
    options[:documenttype] = documenttype
  end

  opt.on("-f","--file FILE","file to train or deliver") do |actfile|
    options[:actfile] = actfile
  end

  opt.on("-d","--daemon","runing on daemon mode? delete") do
    options[:daemon] = true
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end

  opt.on("-e","--environment ENVIRONMENT delete",Numeric,
         "which environment you want server run") do |environment|
    options[:environment] = environment
  end

  opt.on("--delay N", Float, "Delay N seconds before executing delete") do |n|
    options[:delay] = n
  end

  opt.separator  ""
  opt.separator  "Examples"
  opt.separator  "     librarian new -t bankstatements"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/samplebankstatement.pdf"
  opt.separator  "     librarian train -t bankstatements -f /users/me/Documents/Scans/statements"
  opt.separator  "     librarian deliver -f /users/me/Documents/Scans"
  opt.separator  "     librarian deliver -f /users/me/Documents/Scans/321232423.pdf"

end

opt_parser.parse!

def newtype(documentType)
  puts "Add new document type #{documentType}"
  type = Type.new(documentType)
  type.addField("examplefield","exampleregex")
  typeRepository = TypeRepository.new
  typeRepository.add(type)
  puts "Don't forget to modify the regular expressions in the data file"
end

def train(documentType, file)
  puts "Train #{file} as an instance of a #{documentType}"
  words = SpotlightImportingWordExtractor.new(file).extractedWords
  bayesfilename = "bayesdata.librarian"
  nbayes = NBayes::Base.new
  if File.exists?(bayesfilename)
    nbayes = NBayes::Base.from(bayesfilename)
  end
  nbayes.train(words.split(' '),documentType)
  nbayes.dump(bayesfilename)
end

def deliver(file)
  puts "Received #{file} to classify and rename"
  bayesfilename = "bayesdata.librarian"
  nbayes = NBayes::Base.new
  if File.exists?(bayesfilename)
    nbayes = NBayes::Base.from(bayesfilename)
  end
  words = SpotlightImportingWordExtractor.new(file).extractedWords
  result = nbayes.classify(words.split(' '))
  candidatetype = result.max_class
  candidateprobability = result[candidatetype]
  puts "Believe it is a #{candidatetype} with probability #{candidateprobability}"
end

case ARGV[0]
  when "new"
    newtype(options[:documenttype])
  when "train"
    train(options[:documenttype],options[:actfile])
  when "deliver"
    deliver(options[:actfile])
  else
    puts opt_parser
end



